Everywhere I turn, I'm seeing articles about how relational databases are dead and all data will be stored in these flexible eventually consistent data stores. Recently, at PG East, there was a MongoDB track where I had the opportunity to talk to many people either using NoSQL or considering using NoSQL and their reasons for using it were extremely varied. Some people had very legitimate reasons for using a NoSQL option over a traditional relational database like PostgreSQL. There are just some inheritant limitations in relational theory that will never compete with a schema-less document store when it comes to performance. Inserting a parent child relationship such as a new user of a web application who has 2 addresses and 3 phone numbers is much faster in MongoDB, than in PostgreSQL. In PostgreSQL, we would split the user into a row in the user table, 2 rows in the address table and 3 rows in the phone table and let's just ignore those pesky foreign key constraints slowing things down, but in MongoDB, we just insert a single BSON document containing all of the information. For applications with extremely high throughput rates that fit a NoSQL model, it is hard to argue with the performance advantages of this non relational method. Many people, however, did not fit into these extreme usage scenarios and used NoSQL as an easy to use persistent data store. For many of these users, PostgreSQL may actually be a better choice, but unfortunately SQL is becoming more of a foreign language to web developers. Most applications do need to relate information across tables and that is where PostgreSQL outperforms the NoSQL options. To display in an application a list of all of the sales last month from users in New York, a NoSQL database like MongoDB would need to first find all of the users from New York and then use that list as the input into the next query to find the sales. A developer using PostgreSQL would just simply join the sales table with the user and address tables in a single query. PostgreSQL would then handle the optimization of the query such as dealing with the case of having 100,000 users in New York, but only 10 total sales. PostgreSQL would know, based on the statistics of the tables, that it is much more efficient to pull all of the sales and use that as the criteria to pull the final result set. In the MongoDB case, the developer needs to know which order is most efficient, and can frequently be wrong. The manner in which application architecture is evolving implies that we are long past the days where relational databases were a one-size-fits-all solution, but relational databases are nowhere near dead. The key to the continuing dominance of relational databases and expansion of PostgreSQL use is how relational databases interact and coexist with new data stores. The improvements in the SQL/MED functionality in 9.1 are a great first step. With a MongoDB foreign data wrapper, it will allow MongoDB documents to appear as PostgreSQL rows allowing developers to join data in NoSQL data with relational data. Imagine being able to run a single query that will join data in your MongoDB instance with your financial information sitting in an Oracle database and inserting that result into your Teradata Data Warehouse. PostgreSQL with SQL/MED is building toward that and is putting itself into the position to be the one database to rule them all and bind them.           